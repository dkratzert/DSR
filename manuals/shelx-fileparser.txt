
-create derivative of list opbject.
-each line in shelx file is a list element
-iterating over list iterates over lines of file
-different properies:
  -parts
  -residues
  -atoms
  -restraints
  -
-each atom a class?
-subclasses for residues? -> shx.resi.atoms, shx.resi.parts.atoms, 
-how can I make sure that the line number property is correct in all objects?


-shx.atom_str('C5') -> whole line as string
 -should restraints involved with the atom also be part of the atoms properties?
-shx.atom_lst('c5') -> whole line as list
-shx.atom_lst('c5', coords=True) -> coordinates
-shx.atom_lst('C5', coords=True, cartesian=True) -> cartesian coordinates
-shx.atom_lst('C5', neighbours=True)
-shx.residues -> [0,1,2]
-shx.residues.atoms -> {0: ['C1', 'C2', ...], 1: []}
-shx.residues.atom('C1', 0) -> ['C1', 'sfacnum', 'element', x, y, z, part, afix, ...]
-shx.atoms -> ['C1', 'sfacnum', 'element', x, y, z, part, residue, afix, ...] all atoms
-shx.cards -> all non-atoms
-shx.fvar -> free variables
-shx.fvars_used -> all fvars used in file. 
 -writing out file opject to file should transparenty remove all unused fvars.
  might be turned off
-shx.cell, titl, symm, (all cards that are no restraints, data structure is a dict
    all have {..., line: number, ...})
-shx.sfac -> list of sfac cards
-shx.sfac('C') -> unit number
-shx.sfac(2 or '2') -> element name
-shx.ls -> True/False
-shx.cgls -> True/False
-shx.cycles -> get or set sycles
-shx.refine(method='cgls'or'ls', cycles=8, list=4/6/.., acta=True or string )
  -will read in lst file after refinement to fill shx.lst_file properties.
-shx.distance(at1, at2)
-shx.angle(at1, at2, at3)
-shx.delete(atom) -> delte atom. for all deletes: rem, ' ', or completely remove
-shx.delete(atom, property='afix' or 'part', ...)
 -deleting atoms should also remove them from restraints
-shx.move_in_part([list of atoms])
-shx.move_in_resi([list of atoms])
-shx.delete_around(atom, distance)
-shx.removeH([list of atoms])
-shx.update_weight
-shx.weight
-shx.weight_difference
-shx.q-peaks
-shx.q-peak('q1', coords=True) -> same as with atoms
-shx.add_atom(coords, line(optional), u-values(optional), sfac or element 
    or neg atomnumber, part, residue, hfix, after=(atom or card))
-shx.sort -> sort file
-shx.sort.residue(3)
-shx.range('c3', 'C5', forward=True or backward=True) -> resolve range
-shx.restraints ???
-shx.write('filename', directory(optional))
-shx.read('filename', directory(optional))
-shx.lst_file.residuals -> density, r-values, goof, movements, bad reflections
  bad restraints, shelx *** errors
-shx.unused_atom_name('C') -> get a carbon atom with unused number

From cctbx:
args = "LATT 2".split()
n = int(args[1])
if n > 0:
  space_group.expand_inv(sgtbx.tr_vec((0,0,0)))
z = "*PIRFABC"[abs(n)]
space_group.expand_conventional_centring_type(z)







